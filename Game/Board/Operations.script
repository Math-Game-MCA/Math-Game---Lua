local numofops = 5
local operation1

--Operations deal with Operation Creation

function deal_operations(self)
	local operations = {hash("+"), hash("-"), hash("*"), hash("/"), hash("^")}
	self.operation = {} -- Set of Operations
	
	for y = 1,numofops do
     	local id = factory.create("#operationprototype", vmath.vector3(100 + (125*y), 75, 0.6), nil, {operation = operations[y], ix = 100 + (125*y), iy = 75})
    	self.operation[y] = {id = id, operation = operations[y], x = 100 + (125*y), y = 75, connect = 0, count = y}
    end 
end

function shuffle_operations(self)
	for y = 1,numofops do
		go.delete(self.operation[y].id)
	end --deletes operations that still exist and empties the array
	operation1 = nil
end

function match_operations(self, id1) --Sends the operations to solve gui
	local operation
	for y = 1, table.getn(self.operation) do
		if id1 == self.operation[y].id then
			operation = self.operation[y].operation
		end
	end

	local solve = msg.url("/game/Gui/solve#gui")
	msg.post(solve, "operation", {operation})
end

function on_message(self, message_id, message, sender)
   if message_id == hash("deal") then
   		print("Operations dealt")
   		deal_operations(self)
   end
   
    if message_id == hash("shuffle") then
   		print("Operations shuffled")
   		shuffle_operations(self)
   end
   
   if message_id == hash("solve") then
   		match_operations(self, message[1])
   		operation1 = message[1]
   end
   
   if message_id == hash("recall") then
   		local count
   		for y = 1, table.getn(self.operation) do
			if operation1 == self.operation[y].id then
				count = self.operation[y].count
			end
		end
   		go.set(operation1, "position", vmath.vector3(self.operation[count].x, self.operation[count].y, 1)) 
   		operation1 = nil
   end
end
