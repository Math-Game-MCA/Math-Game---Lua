local Holder1_id
local Holder2_id
local opHolder_id
local solHolder_id
local card_id
local operation_id
local connect = {}
local card1, card2, holder = 1,2,3

-- Board deals with all Board interactions

function init(self)

end

function start_game(self) -- sets up game by creating cards and operations
	-- Start_game
	
	-- Deck deals cards
	local deck = msg.url("Deck#script")
	msg.post(deck, "deal")
	
	local operations = msg.url("Operations#script")
	msg.post(operations, "deal")
	
	local sidebar = msg.url("/game/Gui/sidebar#gui")
	msg.post(sidebar, "show")
end

function end_game(self) -- ends game by destroying objects
	-- end_game
	
	-- Empties variables
	empty_variables(self)
	
	-- Deck shuffles cards
	local deck = msg.url("Deck#script")
	msg.post(deck, "shuffle")
	
	local operations = msg.url("Operations#script")
	msg.post(operations, "shuffle")
	
	local sidebar = msg.url("/game/Gui/sidebar#gui")
	msg.post(sidebar, "hide")

	local main_menu = msg.url("/start/start#gui")
	msg.post(main_menu, "show")
end

function empty_variables(self)
	--Holder1_id = nil
	--Holder2_id = nil
	--opHolder_id = nil
	card_id = nil
	operation_id = nil
	connect[1] = nil
	connect[2] = nil
	connect[3] = nil
	connect[4] = nil
end

function solve(self)
	if connect[1] ~= nil and connect[2] ~= nil and connect[3] ~= nil then
		local deck = msg.url("Deck#script")
		local operations = msg.url("Operations#script")
		msg.post(operations, "solve", {connect[3]})
		msg.post(deck, "solve", {connect[1], connect[2]})
	end
end

function snap(self, id1, r1, r2, var)
	local p1 = go.get_position(id1)
	local p2 = {go.get_position(Holder1_id), go.get_position(Holder2_id), go.get_position(opHolder_id), go.get_position(solHolder_id)}
	local id2 = nil
	local type = 1;

	if(p1.x < 300 and var == "card") then
		type = 1
		print("holder1")
	elseif ((p1.x > 299 and p1.x < 650) and var == "op") then
		type = 3
		print("holder2")
	elseif ((p1.x > 649 and p1.x < 800) and var == "card") then
		type = 2
		print("holder3")
	elseif (p1.x > 800 and var == "card") then
		type = 4
		print("holder4")
		msg.post("Verify/Controller#verify", "card snapped", {true})
	end
	
	if (not (type == 4)) and var == "card" then
		msg.post("Verify/Controller#verify", "card snapped", {false})
	end
		
	if((p1.x < p2[type].x + r1 and p1.x > p2[type].x - r1) and (p1.y < p2[type].y + r2 and p1.y > p2[type].y - r2)) and connect[type] == nil then
		go.set_position(p2[type], id1)
		connect[type] = id1
	elseif connect[type] == id1 then
		connect[type] = nil
	else
		print("Nothing")
	end
	
	--[[local card_pos = go.get_position(card_id)
	local operation_pos = go.get_position(operation_id)
	local holder1_pos = go.get_position(Holder1_id)
	local holder2_pos = go.get_position(Holder2_id)
	local opHolder_pos = go.get_position(opHolder_id)
	
	if((card_pos.x < holder1_pos.x + 80 and card_pos.x > holder1_pos.x - 80) and (card_pos.y < holder1_pos.y + 50 and card_pos.y > holder1_pos.y - 50)) and connect[1] == nil then
		go.set_position(holder1_pos, card_id)
		connect[1] = card_id
	elseif((card_pos.x < holder2_pos.x + 80 and card_pos.x > holder2_pos.x - 80) and (card_pos.y < holder2_pos.y + 50 and card_pos.y > holder2_pos.y - 50)) and connect[2] == nil then
		go.set_position(holder2_pos, card_id)
		connect[2] = card_id
	elseif connect[1] == card_id then
		connect[1] = nil
	elseif connect[2] == card_id then
		connect[2] = nil
	end
	
	if((operation_pos.x < opHolder_pos.x + 50 and operation_pos.x > opHolder_pos.x - 50) and (operation_pos.y < opHolder_pos.y + 50 and operation_pos.y > opHolder_pos.y - 50)) and connect[3] == nil then
		go.set_position(opHolder_pos, operation_id)
		connect[3] = operation_id
	elseif connect[3] == operation_id then
		connect[3] = nil
	end--]]
	
	solve(self)
end

function update(self, dt)

end

function on_message(self, message_id, message, sender)
   	 if message_id == hash("start") then
     	print("START Game")
     	start_game(self) -- add more options to change parameters/constructor, ex. start_game(self, difficulty, mode)
     end
     
     if message_id == hash("end") then
     	print("END Game")
     	end_game(self)
     end
     
     if message_id == hash("Holder1") then
     	Holder1_id = message[1]
     end
     
     if message_id == hash("Holder2") then
     	Holder2_id = message[1]
     end
     
     if message_id == hash("opHolder") then
     	opHolder_id = message[1]
     end
     
     if message_id == hash("solHolder") then
     	solHolder_id = message[1]
     	print(solHolder_id)
     end
     
     if message_id == hash("card_id") then
     	card_id = message[1]
     end
     
     if message_id == hash("operation_id") then
     	operation_id = message[1]
     end
     
     if message_id == hash("card_released") then
     	snap(self, card_id, 80, 50, "card")
     	if connect[1] ~= card_id and connect[2] ~= card_id and connect[4] ~= card_id then -- recall
			go.set(card_id, "position", vmath.vector3(message[1], message[2], 1))
		end
		card_id = nil
     end
   
     if message_id == hash("operation_released") then
     	snap(self, operation_id, 50, 50, "op")
     	if connect[3] ~= operation_id then -- recall
			go.set(operation_id, "position", vmath.vector3(message[1], message[2], 1))
		end
		operation_id = nil
     end
     
     if message_id == hash("unconnect") then
     	for x = 1, 3 do
     		connect[x] = nil
     	end
     end
     if message_id == hash("game complete") then
     		empty_variables(self)
	
			-- Deck shuffles cards
			local deck = msg.url("Deck#script")
			msg.post(deck, "shuffle")
			
			local operations = msg.url("Operations#script")
			msg.post(operations, "shuffle")
			start_game()
     end
     
end

function on_input(self, action_id, action)
     
end
