local solution  
local x = os.clock()

function init(self)
    msg.post("#", "disable")
    msg.post(".", "release_input_focus")
    --pos = gui.get_position("solution")
end

function update(self, dt)
    local s = 0
    for i=1,100000 do s = s + i end
    print(string.format("elapsed time: %.0f\n", os.clock() - x))
	local time = gui.get_node("time")
    gui.set_text(time, string.format("%.0f\n", os.clock() - x))
end

function start_clock(self)
    x = os.clock()
end

function on_message(self, message_id, message, sender)
   if message_id == hash("show") then
       	msg.post("#", "enable")
        msg.post(".", "acquire_input_focus")
        start_clock(self)
   end
   
   if message_id == hash("hide") then
   		msg.post("#", "disable")
   		msg.post(".", "release_input_focus")
   end
   
   --[[if message_id == hash("solution") then
   		solution = message[1]
   		local solution = gui.get_node("solution_text")
   		gui.set_text(solution, message[1])
   		msg.post("/game/Board/Board#script", "solHolder", {gui.get_position(gui.get_node("solution"))}) -- sends position of solution holder
   end--]]
end

function on_input(self, action_id, action)
    if action_id == hash("drag") and action.pressed then
    	local exit = gui.get_node("exit")
    	local verifyButton = gui.get_node("verifyButton")
    	if gui.pick_node(exit, action.x, action.y) then
    		msg.post("/game/Board/Board#script", "end")
    	end
    	if gui.pick_node(verifyButton, action.x, action.y) then
    		msg.post("/game/Board/Verify/Verify#script", "verify clicked")
    	end
    end
end

